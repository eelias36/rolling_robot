#!/usr/bin/env python
import rospy
from std_msgs.msg import String, ByteMultiArray, Float32
from sensor_msgs.msg import Imu
import numpy as np
from pyquaternion import Quaternion
from hardware_interface.imu import say_it_works, MinIMU_v5_pi
import time
import math


class Hardware_interface:
    def __init__(self):
        rospy.init_node('hardware_interface_node', anonymous=True, disable_signals=True)

        rospy.Subscriber("/relay_states", ByteMultiArray, self.relay_states_callback, queue_size=1)
        rospy.Subscriber("/driver_speed", Float32, self.driver_speed_callback, queue_size=1)

        self.imu_pub = rospy.Publisher("/imu/data_raw", Imu, queue_size=1)
        self.extended_switches_pub = rospy.Publisher("/extended_switches", ByteMultiArray, queue_size=1)
        self.retracted_switches_pub = rospy.Publisher("/retracted_switches", ByteMultiArray, queue_size=1)
        
        self.imu = MinIMU_v5_pi()
        self.imu_q = Quaternion(-0.2705981, -0.2705981, -0.6532815, -0.6532815)



    def relay_states_callback(self, data):
        return

    def driver_speed_callback(self, data):
        return
        
    def start_running(self):
        rate = rospy.Rate(30) # 30hz
        while not rospy.is_shutdown():
            self.imu_pub.publish( self.get_imu_msg() )
            rate.sleep()

    def get_imu_msg(self):
        imu_msg = Imu()

        accel = np.array( self.imu.readAccelerometer() )
        accel = self.imu_q.rotate(accel)
        # print(accel)
        # print("Gyro: ")
        gyro = np.array( self.imu.readGyro() )
        gyro = self.imu_q.rotate(gyro)
        # print(gyro)

        imu_msg.header.stamp = rospy.Time.now()
        imu_msg.header.frame_id = 'base_link'

        # convert from deg/s to rad/s
        imu_msg.angular_velocity.x = math.radians(gyro[0])
        imu_msg.angular_velocity.y = math.radians(gyro[1])
        imu_msg.angular_velocity.z = math.radians(gyro[2])

        imu_msg.linear_acceleration.x = accel[0]
        imu_msg.linear_acceleration.y = accel[1]
        imu_msg.linear_acceleration.z = accel[2]

        # print("published")
        return imu_msg

if __name__ == '__main__':
    hardware_interface = Hardware_interface()
    hardware_interface.start_running()